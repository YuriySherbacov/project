// let number = 5;
// const hiHoney = 10;


// let un;
// console.log(un);

// const ob = {
//     name: "Ivan", // это свойства объекта 
//     isMarried: false // это свойства объекта, где могут быть любые типы данных
// }; 

// // console.log(ob.name); // при помощи точки мы обратились к значению/свойству объекта name, где и получили результат
// console.log(ob["name"]);

// let arr = ['phi.png', 'wow.jpg', 4, 6, 8]; // это классический вид массива, где все выглядит строго по порядку и куда можно поместить абсолютно любой тип данных (н-р число, строку, объект, булеан значение, массив ), МАССИВ - ЭТО КОМПЛЕКСНЫЙ ТИП ДАННЫХ 
// console.log(arr[2]);

// const arr = [1, 2, 3]; // это массив
// // const obj = {a: 4, b: 5}; // это объект 
// const obj = {
//     'anna': 500, // есть сотрудник и ее зар. плата (ключ, значение), в массиве так записать не получится, потому что мы потеряем смысл, не будет понятно что к чему относиться 
//     'alice': 800,
// };

// const hi = prompt('you here?', '18',)
// console.log(typeof(hi));

// const answers = [];

// // answers[0] = prompt ('Как ваше имя?', '');
// // answers[1] = prompt ('Как ваша фамилия?', '');
// // answers[2] = prompt ('Сколько вам лет?', '');

// console.log(typeof(answers));

// 'use strict';


// const goodMorning = 'coffe';
// console.log(`https://someurl.com${goodMorning/5}`); // такой метод работает, когда вы используете косые кавычки


// let user = 'ivan';

// alert(`привет ${user}`);

// let a = 2;
// let b = 3;

// console.log(`пять это ${a + b} и не ${a*b}`);

// let inkr = 10,
//     dicr = 10;

// // inkr++; // это инкремент, то есть увеличение значение на 1
// // dicr--; // это дикримент (уменьшение значения на 1)
// // если мы ++ или -- ставим впереди переменной - это называется префиксная форма, если после переменной - постфиксная

// console.log(inkr++); // постфиксная сначала возвращаяет старое значение, а после она уже увеличивавет++, или уменьшает -- соответственно
// console.log(dicr--);

// console.log(inkr);
// console.log(dicr);

// console.log(10%3);// мы 10 делим на 3 и получаем остаток от деления 1

// let choice = 15, // знак равно обозначает "присваивание", т.е. мы переменнной choice присваиваем значение 15

// console.log(10 == 2*5); // в данном примере двойной знак равно значит знак "сравнения", т.е 10 равно ли 10? либо true либо false, в данном случае консоль выдаст true, булиновое значение

// === это строгое сравнение, где если число 5 сравнивается со строкой "5" будет ложью, а не правдой
// пример
// console.log('5'==='5'); // true
// console.log(5 === '5'); // false

// логический оператор && (и) || (или)

// && - используется тогда, когда 2 или более подопытных т.е. "и это правда и это правда"

// let is = true,
//     the = true;

// console.log(is && the); // в консоле будет true

// let is = true,
//     the = false;

// console.log(is && the);

// let is = true,
//     the = false;

// console.log(is || the); // здесь в консоле будет true, так как один из елементов будет правдивым

// // эти операторы Очень частно используются на практике

// // оператор восклицания, возвращает значение в обратное (т.е. если была правда, этот оператор вернет ее в ложь, и наоборот)
// let is = true,
//     the = false;

// console.log(is || !the); // здесь этот знак возвращает переменную the в значение правда, вместо ложь, из-за знака восклицания


// console.log(5 + 2 * 5 === 15); // у оператора умножения оператор больше чем у оператора сложения, а оператор сравнения "===" выполняется в последнюю очередь

// != - это значение обозначает "не равен", пример ниже

// console.log(2 * 2 != 4); // читается как, 4 не равно (!=) 4, и в консоле будет ложь, так как это ложь

console.log(3 * 2 !== '6'); // здесь будет ложь, так как строгое сравнение, и 4 не равно строке "4", понимаешь?